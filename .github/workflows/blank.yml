name: Compile (not so) mainline kernel

on:
  workflow_dispatch:

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
    - name: GetTime
      id: get_time
      run: |
        echo "TIME=$(TZ=UTC+3 date +%s )" >> $GITHUB_OUTPUT
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
    - name: Prepare the environment
      run: |
        sudo apt update
        sudo apt -y upgrade
        sudo apt -y install aria2 gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib libc6-dev lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev libxml2 lzop pngcrush schedtool squashfs-tools imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses5 python3
    - name: Install OpenJDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'  
    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo
      
    - name: Initialize repo
      run: |
        mkdir workspace
        cd workspace
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        git config --global user.name "reocat"
        git config --global user.email "ng.ct_ml@tuta.io"
        repo init -u https://github.com/reocat/oriole-ml-manifest -b main --depth=1
      id: pwd
#    - name: Fetch vendor_boot
#      run: |
#        aria2c -o factory.zip -j $(nproc --all) https://release.calyxinstitute.org/oriole-factory-24507000.zip 
#        unzip factory.zip -d unpack
#        cd unpack/*
#        mkdir rom
#        unzip image* -d rom
#        cd rom
#        cp vendor_boot.img ../../..
#        cd ../../..
#        rm -rf unpack
#      working-directory: workspace
    - name: Fetch vendor_boot
      run: |
        aria2c -o vendor_boot.img -j $(nproc --all) https://github.com/reocat/mirror/releases/download/20240821-oriole/vendor_boot.img
      working-directory: workspace
    - name: Repo Sync
      run: |
        repo sync -c --force-sync --optimized-fetch --no-tags --no-clone-bundle --prune -j$(nproc --all)
      working-directory: workspace
    - name: Extract ramdisk
      run: |
        tools/mkbootimg/unpack_bootimg.py --boot_img vendor_boot.img --out vendor_boot_out
        cp vendor_boot_out/vendor-ramdisk-by-name/ramdisk_ prebuilts/boot-artifacts/ramdisks/vendor_ramdisk-oriole.img
      working-directory: workspace
#    - name: Replace clang
#      run: | 
#        cd prebuilts/clang/host/linux-x86/clang-r487747c
#        rm -rf -- ./*/
#        aria2c -j$(nproc --all) $(curl -fsSL https://github.com/ZyCromerZ/Clang/raw/main/Clang-main-link.txt)
#        tar -xzvf Clang-*.tar.gz >> /dev/null
#      working-directory: workspace
    - name: Integrate KernelSU
      run: |
        ls -l
        ls -l kernel
        cd aosp
        ls -l
        curl -fsSL "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
      working-directory: workspace
    - name: Compile kernel
      run: |
        chmod 777 build_slider.sh 
        BUILD_AOSP_KERNEL=1 LTO=thin ./build_slider.sh
      working-directory: workspace
    - name: Upload full kernel
      uses: actions/upload-artifact@v4
      with:
        name: hOS-krnl-${{ steps.get_time.outputs.TIME }}-full
        path: "workspace/out/slider/dist/*"
    - name: Move flashable images
      run: |
        cd out/slider/dist/
        mkdir mainline
        mv *img mainline
      working-directory: workspace
    - name: Upload images
      uses: actions/upload-artifact@v4
      with:
        name: hOS-krnl-${{ steps.get_time.outputs.TIME }}-images
        path: "workspace/out/slider/dist/mainline/*"
